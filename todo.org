#+title: Todo list for status
#+AUTHOR: D3faIt

* [0/4] Parser support

We would like to have basic control over checking status, pausing testing, and starting testing.
Detailed control would be desirable.

As the code functions right now, the parser is unable to allow such arguments like this:

#+begin_src bash

$ status service check test1 test2 test3
$ status service pause test1 test3
$ status service start test2 test3

#+end_src

/Or, since we're using named pipe, that would be this instead/

#+begin_src bash

$ echo "service check test1 test2 test3" > /tmp/status_in_pipe
$ echo "service pause test1 test3" > /tmp/status_in_pipe
$ echo "service start test2 test3" > /tmp/status_in_pipe

#+end_src

We can't do this because of how the [[https://github.com/clap-rs/clap][clap]] library functions, getting such error:

#+begin_src
error[E0277]: the trait bound `ServiceSubcommand: clap::Args` is not satisfied
  --> src/pipes/listen.rs:21:13
   |
21 |     Service(ServiceSubcommand),
   |             ^^^^^^^^^^^^^^^^^ the trait `clap::Args` is not implemented for `ServiceSubcommand`
   |
   = help: the following other types implement trait `clap::Args`:
             Box<T>
             Cli
             ServiceArgs
#+end_src

** [ ] Baseline

Before we can do Check, Pause, Start, the baseline needs to be done

** HOLD Check

Check should print out the info of the service

** HOLD Pause

Pause should pause checking/testing the service every x seconds

** HOLD Start

Start, pretty much just start it again after having been stopped.

* [ ] Add example command scripts for all 3 formats that actually function like one would use it

To clear up some confusion, this is probably not a bad idea

* [ ] Bash script support error code returns

Right now the bash script only handles exit code 0, 1 and 124. These are success, file not found and timeout.
We want to pass the exit code from the rust application to bash somehow too

* STRT Time interval per service

When running a lot of different tests independent from each other, it might not be a bad idea to have different check intervals on them.
Some services, we may want to check frequent, while others that might cause high load will be ran less often.

We hope to implement an option for each service in settings.json

* [X] Arguments for commands

Arguments for commands defined in `settings.json` doesn't works

We want to be able to define such commands:

#+begin_src json
{
  "interval": 600,
  "timeout": 3000,
  "services": [
    {
      "name": "Website 1",
      "command": "/path/to/my/script.py --my-arg argument"
    },
    {
      "name": "Website 2",
      "command": "commands/web2.sh --wow --cool"
    }
  ]
}

#+end_src

SOLUTION: Optional key in settings.json. Using the example above we do:

#+begin_src json
{
  "interval": 600,
  "timeout": 3000,
  "services": [
    {
      "name": "Website 1",
      "command": "/path/to/my/script.py",
      "args": [
        "--my-arg", "argument"
      ]
    },
    {
      "name": "Website 2",
      "command": "commands/web2.sh",
      "args": [
        "--wow", "--cool"
      ]
    }
  ]
}
#+end_src

* [X] *proper* arguments

Addressing the elephant in the room, this is /probably/ wanted.
But this would require making a daemon, 2 applications (Or an alternative like HTTP) instead of 2 threads

SOLUTION: bash script, check the file called run

See [[https://github.com/D3faIt/status/blob/main/run][the run script]]
