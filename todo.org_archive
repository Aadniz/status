#    -*- mode: org -*-


Archived entries from file /home/chiya/RustroverProjects/status/todo.org


* [X] *proper* arguments
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-01 Sun 11:10
:ARCHIVE_FILE: ~/RustroverProjects/status/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: [X]
:END:

Addressing the elephant in the room, this is /probably/ wanted.
But this would require making a daemon, 2 applications (Or an alternative like HTTP) instead of 2 threads

SOLUTION: bash script, check the file called run

See [[https://github.com/D3faIt/status/blob/main/run][the run script]]

* [X] Arguments for commands
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-01 Sun 11:10
:ARCHIVE_FILE: ~/RustroverProjects/status/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: [X]
:END:

Arguments for commands defined in `settings.json` doesn't works

We want to be able to define such commands:

#+begin_src json
{
  "interval": 600,
  "timeout": 3000,
  "services": [
    {
      "name": "Website 1",
      "command": "/path/to/my/script.py --my-arg argument"
    },
    {
      "name": "Website 2",
      "command": "commands/web2.sh --wow --cool"
    }
  ]
}

#+end_src

SOLUTION: Optional key in settings.json. Using the example above we do:

#+begin_src json
{
  "interval": 600,
  "timeout": 3000,
  "services": [
    {
      "name": "Website 1",
      "command": "/path/to/my/script.py",
      "args": [
        "--my-arg", "argument"
      ]
    },
    {
      "name": "Website 2",
      "command": "commands/web2.sh",
      "args": [
        "--wow", "--cool"
      ]
    }
  ]
}
#+end_src


* [X] Providing settings path as an argument
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-01 Sun 11:10
:ARCHIVE_FILE: ~/RustroverProjects/status/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: [X]
:END:

In some cases we want to spesify the location of the settings.json instead of letting it always be next to the executable.

We want to be able to run the application like `./status /path/to/settings/file.json`

SOLUTION: There are now 2 argument parsers, one for the daemon itself, and one for for communication


* [X] Time interval per service
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-01 Sun 11:10
:ARCHIVE_FILE: ~/RustroverProjects/status/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: [X]
:END:

When running a lot of different tests independent from each other, it might not be a bad idea to have different check intervals on them.
Some services, we may want to check frequent, while others that might cause high load will be ran less often.

We hope to implement an option for each service in settings.json

SOLUTION: Multithreaded testing for each test acting independent from each other while using shared memory


* [X] Pause on no internet
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-07 Sat 07:19
:ARCHIVE_FILE: ~/RustroverProjects/status/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: [X]
:END:

We may want to add a setting to pause checking if there is no internet.
Sometimes an executable test may need internet to work properly

SOLUTION: Added "online" crate that checks for the network activity. Also added new setting "pause_on_no_internet". If there is no internet, next interval happens 5 times earlier

- Consider lowering interval significantly during loss of internet.
- Or, instantly test again when there is internet again

